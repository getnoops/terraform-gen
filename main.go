package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"

	"github.com/getnoops/terraform-gen/luthor"
)

var requiredVariables = []string{
	"name",
	"tags",
}

var (
	output = flag.String("output", "", "output file name; default ./resources_gen.go")
	packag = flag.String("package", "", "package name; default resources")
	ignore = flag.String("ignore", "", "variables to ignore during generation")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of gen:\n")
	fmt.Fprintf(os.Stderr, "\tgen [flags] [directory]\n")
	flag.PrintDefaults()
}
func main() {
	log.SetFlags(0)
	log.SetPrefix("stringer: ")
	flag.Usage = Usage
	flag.Parse()

	// Write to file.
	packageName := *packag
	if packageName == "" {
		packageName = "resources"
	}

	ignoreList := strings.Split(*ignore, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	data, err := luthor.LoadData(args, ignoreList)
	if err != nil {
		log.Fatalf("loading data: %s", err)
	}

	g := Generator{}
	g.writePackage(packageName)
	g.writeStructTypes(data.Structs)
	g.writeFactory(data.Modules)

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		outputName = "./resources_gen.go"
	}

	if err := os.WriteFile(outputName, src, 0644); err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
}

func (g *Generator) writePackage(packageName string) {
	// Print the header and package clause.
	g.Printf("// Code generated by \"gen %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", packageName)
	g.Printf("\n\n")
	g.Printf("import \"fmt\"\n\n")
}

func (g *Generator) writeStructTypes(structs []*luthor.StructType) {
	for _, s := range structs {
		g.Printf("type %s struct {\n", s.Name)

		for _, p := range s.Fields {
			g.writeField(p)
		}

		g.Printf("}\n\n")
	}
}

func (g *Generator) writeField(field *luthor.FieldType) {
	if len(field.Description) > 0 {
		g.Printf("// %s\n", field.Description)
	}

	var tags string
	if len(field.Tag) > 0 {
		tags = "`" + field.Tag + "`"
	}

	g.Printf("%s %s %s\n", field.Name, field.Type, tags)
}

func (g *Generator) writeFactory(modules []*luthor.ModuleData) {
	g.Printf("func NewResource(name string) (interface{}, error) {\n")
	g.Printf("switch name {\n")
	for _, value := range modules {
		g.Printf("case \"%s\":\n", value.Name)
		g.Printf("return &%s{}, nil\n", value.TypeName)
	}
	g.Printf("default:\n")
	g.Printf("return nil, fmt.Errorf(\"unknown resource type: %%s\", name)\n")
	g.Printf("}\n")
	g.Printf("}\n")
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}
